// Mixin
@import "css3-mixins.less";

.cssreset() {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}
.px2em(@property, @target: @font-size-base, @default: @font-size-base) {
  .px2units(@property, em, @target, @default);
}
.px2rem(@property, @target: @font-size-base, @default: @font-size-base) {
  .px2units(@property, rem, @target, @default);
}


// Center-align a block level element
.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Font face
// Usage
// 1. Create new variables for fonts name. ex: @var1:...; @var2:...;
// 2. Call by .font-faces(@var1 @var2)
.font-faces(@names) {
  .loop(@i) when (@i <= length(@names)) {
    @name: extract(@names, @i);
    @font-face {
      font-family: @name;
      src: url('../fonts/@{name}.woff2') format('woff2'),
        url('../fonts/@{name}.woff') format('woff'),
        url('../fonts/@{name}.ttf')  format('truetype'),
        url('../fonts/@{name}.otf')  format('truetype');
      font-weight: normal;
      font-style: normal;
    }
    .loop(@i + 1);
  }
  .loop(1);
}

// Placeholder text
.placeholder(@color: @placeholder-color) {
  &:-moz-placeholder {
    color: @color;
  }
  &::-moz-placeholder {
    color: @color;
  }
  &:-ms-input-placeholder {
    color: @color;
  }
  &::-webkit-input-placeholder {
    color: @color;
  }
}
// Text overflow
.text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
// Clearfix
.clearfix() {
  &:before, &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}
